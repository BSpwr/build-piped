name: Build Docker Image

on:
  schedule:
    - cron: "0 0 * * *"  # Once per day at midnight UTC
  workflow_dispatch:

jobs:
  build:
    name: Build piped-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Get git info
        id: git-info
        run: |
          cd piped-frontend
          echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Check Docker image exists
        id: inspect
        run: |
          image=ghcr.io/bspwr/piped-frontend:latest
          docker pull $image
          hash=$(docker inspect --format '{{ index .Config.Labels "org.opencontainers.image.revision" }}' $image)
          [[ $hash != '${{ steps.git-info.outputs.hash }}' ]] && echo 'build=true' >> $GITHUB_OUTPUT || exit 0

      - name: Build piped-frontend
        if: ${{ steps.inspect.outputs.build == 'true' }}
        run: |
          cd piped-frontend
          yarn install --prefer-offline
          yarn build && ./localizefonts.sh && mv dist/ dist-ci/

      - name: Docker metadata
        if: ${{ steps.inspect.outputs.build == 'true' }}
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/bspwr/piped-frontend
          labels: |
            org.opencontainers.image.title=piped-frontend
            org.opencontainers.image.description=An alternative privacy-friendly YouTube frontend which is efficient by design.
            org.opencontainers.image.source=https://github.com/TeamPiped/Piped
            org.opencontainers.image.version=${{ steps.git-info.outputs.hash }}
            org.opencontainers.image.revision=${{ steps.git-info.outputs.hash }}
      - name: Set up Docker Buildx
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/bspwr/piped-frontend:latest, ghcr.io/bspwr/piped-frontend:${{ steps.git-info.outputs.hash }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/bspwr/piped-frontend:latest
          cache-to: type=inline